Module 4 Snippets
-----------------

public async Task<int> AddPieAsync(Pie pie)
        {
            _bethanysPieShopDbContext.Pies.Add(pie);//could be done using async too
            return await _bethanysPieShopDbContext.SaveChangesAsync();
        }




<div class="mb-3">
        <label asp-for="Pie.Name" class="form-label"></label>
        <input asp-for="Pie.Name" class="form-control" />
    </div>

    <div class="mb-3">
        <label asp-for="Pie.ShortDescription" class="form-label"></label>
        <textarea asp-for="Pie.ShortDescription" class="form-control" rows="5" cols="50" style="resize: none;"></textarea>
    </div>

    <div class="mb-3">
        <label asp-for="Pie.LongDescription" class="form-label"></label>
        <textarea asp-for="Pie.LongDescription" class="form-control" rows="5" cols="50" style="resize: none;"></textarea>
    </div>


    <div class="mb-3">
        <label asp-for="Pie.AllergyInformation" class="form-label"></label>
        <textarea asp-for="Pie.AllergyInformation" class="form-control" rows="5" cols="50" style="resize: none;"></textarea>
    </div>

    <div class="mb-3">
        <label asp-for="Pie.Price" class="form-label"></label>
        <input asp-for="Pie.Price" class="form-control" />
    </div>

    <div class="mb-3">
        <label asp-for="Pie.ImageThumbnailUrl" class="form-label"></label>
        <input asp-for="Pie.ImageThumbnailUrl" class="form-control" />
    </div>

    <div class="mb-3">
        <label asp-for="Pie.ImageUrl" class="form-label"></label>
        <input asp-for="Pie.ImageUrl" class="form-control" />
    </div>

    <div class="mb-3">
        <label asp-for="Pie.IsPieOfTheWeek" class="form-label"></label>
        <input asp-for="Pie.IsPieOfTheWeek" />
    </div>

    <div class="mb-3">
        <label asp-for="Pie.InStock" class="form-label"></label>
        <input asp-for="Pie.InStock" />
    </div>

    <div class="mb-3">
        <label asp-for="Categories" class="form-label"></label>
        <select asp-for="Pie.CategoryId" asp-items="Model.Categories"></select>
    </div>

    <input type="submit" value="Add pie" class="btn btn-primary" />





Pie pie = new()
            {
                CategoryId = pieAddViewModel.Pie.CategoryId,
                ShortDescription = pieAddViewModel.Pie.ShortDescription,
                LongDescription = pieAddViewModel.Pie.LongDescription,
                Price = pieAddViewModel.Pie.Price,
                AllergyInformation = pieAddViewModel.Pie.AllergyInformation,
                ImageThumbnailUrl = pieAddViewModel.Pie.ImageThumbnailUrl,
                ImageUrl = pieAddViewModel.Pie.ImageUrl,
                InStock = pieAddViewModel.Pie.InStock,
                IsPieOfTheWeek = pieAddViewModel.Pie.IsPieOfTheWeek,
                Name = pieAddViewModel.Pie.Name
            };




Task<int> AddCategoryAsync(Category category);

        public async Task<int> AddCategoryAsync(Category category)
        {
            bool categoryWithSameNameExist = await _bethanysPieShopDbContext.Categories.AnyAsync(c => c.Name == category.Name);

            if (categoryWithSameNameExist)
            {
                throw new Exception("A category with the same name already exists");
            }

            _bethanysPieShopDbContext.Categories.Add(category);

            return await _bethanysPieShopDbContext.SaveChangesAsync();
        }

      public IActionResult Add()
        {
            return View();
        }

        [HttpPost]
        public async Task<IActionResult> Add([Bind("Name,Description,DateAdded")] Category category)
        {
            await _categoryRepository.AddCategoryAsync(category);
            return RedirectToAction(nameof(Index));
        }

Pie.cs

public int PieId { get; set; }
        [Display(Name = "Name")]
        [Required]
        public string Name { get; set; } = string.Empty;

        [StringLength(100)]
        [Display(Name = "Short description")]
        public string? ShortDescription { get; set; }

        [Display(Name = "Long description")]
        [StringLength(1000)]
        public string? LongDescription { get; set; }

        [Display(Name = "Allergy information")]
        [StringLength(1000)]
        public string? AllergyInformation { get; set; }

        [Display(Name = "Price")]
        public decimal Price { get; set; }

        [Display(Name = "Image URL")]
        public string? ImageUrl { get; set; }

        [Display(Name = "Image thumbnail URL")]
        public string? ImageThumbnailUrl { get; set; }

        [Display(Name = "Is pie of the week?")]
        public bool IsPieOfTheWeek { get; set; }

        [Display(Name = "In stock?")]
        public bool InStock { get; set; }

        [Display(Name = "Category ID")]
        public int CategoryId { get; set; }

        [Display(Name = "Category")]
        public Category? Category { get; set; } 
        
        [Display(Name = "Ingredients")]
        public ICollection<Ingredient>? Ingredients { get; set; }

Order.cs

public int OrderId { get; set; }

        public ICollection<OrderDetail>? OrderDetails { get; set; }

        public OrderStatus OrderStatus { get; set; }

        [Required(ErrorMessage = "Please enter your first name")]
        [Display(Name = "First name")]
        [StringLength(50)]
        public string FirstName { get; set; } = string.Empty;

        [Required(ErrorMessage = "Please enter your last name")]
        [Display(Name = "Last name")]
        [StringLength(50)]
        public string LastName { get; set; } = string.Empty;

        [Required(ErrorMessage = "Please enter your address")]
        [StringLength(100)]
        [Display(Name = "Address Line 1")]
        public string AddressLine1 { get; set; } = string.Empty;

        [Display(Name = "Address Line 2")]
        public string? AddressLine2 { get; set; }

        [Required(ErrorMessage = "Please enter your zip code")]
        [Display(Name = "Zip code")]
        [StringLength(10, MinimumLength = 4)]
        public string ZipCode { get; set; } = string.Empty;

        [Required(ErrorMessage = "Please enter your city")]
        [StringLength(50)]
        public string City { get; set; } = string.Empty;

        [StringLength(10)]
        public string? State { get; set; }

        [Required(ErrorMessage = "Please enter your country")]
        [StringLength(50)]
        public string Country { get; set; } = string.Empty;

        [Required(ErrorMessage = "Please enter your phone number")]
        [StringLength(25)]
        [DataType(DataType.PhoneNumber)]
        [Display(Name = "Phone number")]
        public string PhoneNumber { get; set; } = string.Empty;

        [Required]
        [StringLength(50)]
        [DataType(DataType.EmailAddress)]
        [RegularExpression(@"(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|""(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21\x23-\x5b\x5d-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])*"")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21-\x5a\x53-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])+)\])",
            ErrorMessage = "The email address is not entered in a correct format")]
        public string Email { get; set; } = string.Empty;

        [BindNever]
        [ScaffoldColumn(false)]
        public decimal OrderTotal { get; set; }

        [BindNever]
        [ScaffoldColumn(false)]
        public DateTime OrderPlaced { get; set; }

Ingredient.cs

[StringLength(50, ErrorMessage = "The name should be no longer than 50 characters.")]
        [Display(Name = "Name")] 
        public string Name { get; set; } = string.Empty;

        [StringLength(100, ErrorMessage = "The amount should be no longer than 100 characters.")]
        [Display(Name = "Amount")]
        public string Amount { get; set; } = string.Empty;


Category.cs

public int CategoryId { get; set; }

        [StringLength(50, ErrorMessage = "The name should be no longer than 50 characters.")]
        [Display(Name = "Name")]
        public string Name { get; set; } = string.Empty;

        [Display(Name = "Description")]
        [StringLength(1000, ErrorMessage = "The description should be no longer than 1000 characters.")]
        public string? Description { get; set; }

        [DataType(DataType.Date)]
        [DisplayFormat(DataFormatString = "{0:yyyy-MM-dd}", ApplyFormatInEditMode = true)]
        [Display(Name = "Date added")]
        public DateTime? DateAdded { get; set; }

        public ICollection<Pie>? Pies { get; set; }


if (ModelState.IsValid)
            {
                Pie pie = new()
                {
                    CategoryId = pieAddViewModel.Pie.CategoryId,
                    ShortDescription = pieAddViewModel.Pie.ShortDescription,
                    LongDescription = pieAddViewModel.Pie.LongDescription,
                    Price = pieAddViewModel.Pie.Price,
                    AllergyInformation = pieAddViewModel.Pie.AllergyInformation,
                    ImageThumbnailUrl = pieAddViewModel.Pie.ImageThumbnailUrl,
                    ImageUrl = pieAddViewModel.Pie.ImageUrl,
                    InStock = pieAddViewModel.Pie.InStock,
                    IsPieOfTheWeek = pieAddViewModel.Pie.IsPieOfTheWeek,
                    Name = pieAddViewModel.Pie.Name
                };

                await _pieRepository.AddPieAsync(pie);
                return RedirectToAction(nameof(Index));
            }

            var allCategories = await _categoryRepository.GetAllCategoriesAsync();

            IEnumerable<SelectListItem> selectListItems = new SelectList(allCategories, "CategoryId", "Name", null);

            pieAddViewModel.Categories = selectListItems;

            return View(pieAddViewModel);



     [HttpPost]
        public async Task<IActionResult> Add([Bind("Name,Description,DateAdded")] Category category)
        {
            try
            {
                if (ModelState.IsValid)
                {
                    await _categoryRepository.AddCategoryAsync(category);
                    return RedirectToAction(nameof(Index));
                }
            }
            catch (Exception ex)
            {
                ModelState.AddModelError("", $"Adding the category failed, please try again! Error: {ex.Message}");
            }

            return View(category);
        }




public async Task<IActionResult> Add()
        {
            try
            {
                IEnumerable<Category>? allCategories = await _categoryRepository.GetAllCategoriesAsync();
                IEnumerable<SelectListItem> selectListItems = new SelectList(allCategories, "CategoryId", "Name", null);

                PieAddViewModel pieAddViewModel = new() { Categories = selectListItems };
                return View(pieAddViewModel);
            }
            catch (Exception ex)
            {
                ViewData["ErrorMessage"] = $"There was an error: {ex.Message}";
            }
            return View(new PieAddViewModel());
           
        }
